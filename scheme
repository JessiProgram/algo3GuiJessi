#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct lista{
	int ident;
	int numero;
	char cadena[30];
	float decimal;
	struct lista* list;
	int posList;
	struct lista* bro;
};
typedef struct lista lista;

lista* fr(lista* nestedNumber, char* lista, int listaAux[], int pos, int jerarquia);
void listar(lista* ptr,int tab);
void creaElemento(lista* *nestedNumber, int identificador, char* elemento, int posIniNewList);

int main(){
	//Coloque la lista en la cadena, entre coma
	lista* nestedNumber = NULL;
	lista* nestedNumberAux = NULL;
	
	/*(1 ("HOLA") 3 (8))
	100200000020002021

	+
	/	pos = 3
	+
	/	pos = 14
	*/

	char lista[]="(1 -2 \"hola\" (2 7 (25 \"JESSI\") 4) \"xd\" 7)";
	int listaAux[strlen(lista)];
	

	int i, j=0, c;
	
	for(i=0;i<strlen(lista);i++){
		if(lista[i]=='('){
			j++;
			listaAux[i]=j;
		}else if(lista[i]==')'){
			listaAux[i]=j;
			j--;
		}else{
			listaAux[i] = 0;
		}

	}
	for(i=0;i<strlen(lista);i++){
		printf(" %d",listaAux[i]);
	}
	

	nestedNumber = fr(nestedNumberAux, lista, listaAux, 0, 1);

	listar(nestedNumber, 0);
		
	return 0;
}




lista* fr(lista* nestedNumber, char* lista, int listaAux[], int pos, int jerarquia){
	
	lista* movimiento = NULL;
	int i, j, a = 0, x;
	int activado = 0, direccion = 1;
	int entero = 0, flotante = 0, texto = 0;
	char elemento[strlen(lista)];

	for(i = pos; i < strlen(lista); i++){
		entero = 0;
		texto = 0;
		flotante = 0;

		if(listaAux[i] == jerarquia && i != pos){
			break;
		}

		//(1 ("hola") 3 (8))
		//100200000020002021
		
		// CONCATENA EL CONTENIDO POR CARACTER
		if(lista[i] != ')' && lista[i] != '('  && lista[i] != ' ' && lista[i] != '"'){
			activado = 1;
			elemento[a] = lista[i];
			elemento[a+1] = '\0';
			a++;
			direccion = 1;
			
		}else{
			
			// YA SE AGARRO TODO UN CONTENIDO
			if(activado == 1){

				for(x = 0; x < a; x++){

					if(elemento[x]!='-' && elemento[x]!='1' && elemento[x]!='2' && elemento[x]!='3' && elemento[x]!='4' && elemento[x]!='5' && elemento[x]!='6' && elemento[x]!='7' && elemento[x]!='8' && elemento[x]!='9' && elemento[x]!='0'){
						entero = 0;
						texto = 1;
						flotante = 1;
					}
				}

				if(texto == 0){
					entero = 1;
					texto = 0;
					flotante = 0;
				}

				if(texto == 1 || flotante == 1){
					if(atof(elemento) != 0.0){
						flotante = 1;
						texto = 0;
						entero = 0;
					}else{
						texto = 1;
						flotante = 0;
						entero = 0;
					}
				}

				if(listaAux[i] == jerarquia + 1){

					creaElemento(&nestedNumber, 4, elemento, i);
					
					for(j = i+1; listaAux[j] != jerarquia + 1; j++){
						i = j+1;
					}

				}else if(listaAux[i] == jerarquia){
					if(entero == 1){
						creaElemento(&nestedNumber, 1, elemento, 0);
					}else if(texto == 1){
						creaElemento(&nestedNumber, 2, elemento, 0);
					}else if(flotante == 1){
						creaElemento(&nestedNumber, 3, elemento, 0);
					}
				}

			}

			a=0;
			activado=0;
		}
	
	}


	movimiento = nestedNumber;
	while(movimiento != NULL){
		if(movimiento->ident == 4){
			movimiento->list = fr(movimiento, lista, listaAux, movimiento->posList, jerarquia+1);
		}
		movimiento = movimiento->bro;
	}

	return nestedNumber;
}


void creaElemento(lista* *nestedNumber, int identificador, char* elemento, int posIniNewList){
	
	int i;

	lista* contenido = (lista*) malloc(sizeof(lista));
	lista* ultimo = NULL;

	contenido->ident = identificador;
	if(identificador == 1){
		contenido->numero = atoi(elemento);
	}else if(identificador == 2){
		for(i = 0; i < strlen(elemento); i++){
			contenido->cadena[i] = elemento[i];
		}
		contenido->cadena[i] = '\0';

	}else if(identificador == 3){
		contenido->decimal = atof(elemento);
	}else if(identificador == 4){
		contenido->posList = posIniNewList;
	}

	contenido->bro = NULL;
	contenido->list = NULL;

	if(*nestedNumber == NULL){
		*nestedNumber = contenido;
	}else{
		ultimo = *nestedNumber;
		while(ultimo->bro != NULL){
			ultimo = ultimo->bro;
		}
		ultimo->bro = contenido;
	}

	return ;
}





void listar(lista *ptr, int tab){
	//printf("\ngggggg\n");
	//lista* ola=*ptr;
	//printf("\nQue se hace %p",ptr->list);
	if((ptr)->list!=NULL){
		//printf("ggggggjjjjj\n");
		
		listar(((ptr)->list),tab+1);
	}else if(((ptr)->ident==1 || (ptr)->ident==2 || (ptr)->ident==3) && (ptr)!=NULL){
		//printf("\nCompletar");
		printf("\n");
		for(int i=1;i<=tab;i++){
			printf("\t");
		}
		if((ptr)->ident==1){
			printf("%d",(ptr)->numero);
		}else if((ptr)->ident==2){
			printf("%s",(ptr)->cadena);
		}else if((ptr)->ident==3){
			printf("%lf",(ptr)->decimal);
		}
		
	}

	if(ptr != NULL){
		listar(((ptr)->bro),tab);
	}
	return;
}
